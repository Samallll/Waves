apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv
  namespace: store
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  hostPath:
    path: "/mnt/data"  # - for Unix/Linux
    #    path: "/run/desktop/mnt/host/c/temp/testfiles" for windows
    type: DirectoryOrCreate

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-pvc
  namespace: store
spec:
  resources:
    requests:
      storage: 2Gi
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: store
spec:
  selector:
    matchLabels:
      app: kafka
  serviceName: kafka-svc
  replicas: 1
  template:
    metadata:
      labels:
        app: kafka
    spec:
      hostname: kafka-broker
      containers:
        - name: kafka
          image: bitnami/kafka
          imagePullPolicy: IfNotPresent
          env:
            - name: KAFKA_CFG_NODE_ID
              value: "1"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              valueFrom:
                configMapKeyRef:
                  name: kafka-cm
                  key: zookeeper_connect_url
          ports:
            - containerPort: 9092
          volumeMounts:
            - name: kafka-config
              mountPath: /opt/bitnami/kafka/conf
            - name: kafka-persistent-storage
              mountPath: /var/lib/kafka
      volumes:
        - name: kafka-config
          configMap:
            name: kafka-init-cm
        - name: kafka-persistent-storage
          persistentVolumeClaim:
            claimName: kafka-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
  namespace: store
spec:
  clusterIP: None
  selector:
    app: kafka
  ports:
    - port: 9092
      targetPort: 9092